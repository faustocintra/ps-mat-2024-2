// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// O model Car tem duas relações com o model User. Isso exige que demos um
// nome distinto a cada uma delas no descritor @relation.
model Car {
  id                Int           @id @default(autoincrement())
  brand             String        // Marca do carro
  model             String        // Modelo do carro
  color             String        // Cor do carro
  year_manufacture  Int           // Ano de fabricação
  imported          Boolean       // Se o carro é importado ou não
  plates            String        // Placas do carro
  selling_date      DateTime?     // Data de venda; preenchimento opcional
  selling_price     Decimal?      // Preço de venda; preenchimento opcional 
  customer_id       Int?
  customer          Customer?     @relation(fields: [customer_id], references: [id])
  created_user_id   Int           @default(1)
  updated_user_id   Int            @default(1)
  created_user      User          @relation("created_user", fields: [created_user_id], references: [id])
  updated_user      User          @relation("updated_user", fields: [updated_user_id], references: [id])
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt  @default(now())
}

model Customer {
  id                Int           @id @default(autoincrement())
  name              String
  ident_document    String
  birth_date        DateTime?
  street_name       String
  house_number      String
  complements       String?
  district          String        @default("Centro")
  municipality      String
  state             String
  phone             String
  email             String
  cars              Car[]         // Carros adquiridos pelo cliente
}

// O model User tem duas relações com o model Car. Isso exige que o descritor
// @relation seja informado, contendo um nome distinto para cada relação.
model User {
  id                Int           @id @default(autoincrement())
  fullname          String        // Nome completo
  username          String        @unique   // Não pode repetir
  email             String        @unique
  password          String
  is_admin          Boolean       @default(false)
  created_cars      Car[]         @relation("created_user")
  updated_cars      Car[]         @relation("updated_user")
}


